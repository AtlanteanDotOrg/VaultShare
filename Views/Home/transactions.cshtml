@model IEnumerable<TransactionModel>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <title>VaultShare - Recent Transactions</title>
    <style>
        body { background-color: #F8C471; }
        .transactions-page {
            display: flex;
            justify-content: center;
            align-items: center;
            height: calc(100vh - 90px);
        }
        .transactions-container {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            margin: auto;
            width: 80%;
            margin-top: 80px;
        }
        .transaction-row {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #E0E0E0;
        }
        .transaction-row:last-child { border-bottom: none; }
        .transaction-details {
            display: flex;
            align-items: center;
            flex-grow: 1; 
            margin-left: 10px;
        }
        .hidden-buttons {
            visibility: hidden;
        }

        .transaction-row {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #E0E0E0;
        }

        .transaction-row:last-child { 
            border-bottom: none; 
        }

        .transaction-details {
            display: flex;
            align-items: center;
            flex-grow: 1;
            position: relative;
            justify-content: space-between;
        }

        .description {
            text-align: center;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
            transition: left 0.3s ease; /* Add transition for smooth animation */
            position: relative; /* Allow left to work properly */
            flex-grow: 1;
        }

        .amount {
            width: 100px;
            text-align: right;
        }

        .amount-positive { color: #27AE60; }
        .amount-negative { color: #E74C3C; }

        .approve-deny-buttons {
            position: absolute; /* Keep buttons in place */
            left: 600px;/* Position buttons at the right */
            visibility: hidden; /* Initially hidden */
            gap: 5px;
        }

        .transaction-row.show-buttons .approve-deny-buttons {
            visibility: visible; /* Show the buttons when needed */
        }
        .btn-approve {
            background-color: #27AE60;
            color: white;
            border: none;
        }

        .btn-deny {
            background-color: #E74C3C;
            color: white;
            border: none;
        }
        .transactions-container img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            object-fit: cover;
        }
        h2 {
            text-align: center;
            position: relative;
        }
    </style>
</head>
<body>
    <div class="transactions-page">
        <br><br><br>
        <div class="transactions-container">
            <h2>Recent Transactions</h2>

        @foreach (var transaction in Model)
        {
            <div class="transaction-row @(transaction.Amount < 0 ? "show-buttons" : "")">
                <img src="@transaction.ImageUrl" alt="Profile Picture" class="rounded-circle" height="30">
                <div class="transaction-details">
                    <span class="description">@transaction.Description</span>

                    <!-- Approve/Deny buttons -->
                    <div class="approve-deny-buttons">
                        <button class="btn btn-approve btn-sm">Approve</button>
                        <button class="btn btn-deny btn-sm">Deny</button>
                    </div>

                    <span class="amount @(transaction.Amount < 0 ? "amount-negative" : "amount-positive")">
                        @if (transaction.Amount < 0) {
                            @("-" + transaction.Amount.ToString("C").Replace("(", "").Replace(")", ""))
                        } else {
                            @transaction.Amount.ToString("C")
                        }
                    </span>
                </div>
            </div>
        }

        </div>
    </div>
    <div class="modal fade" id="transactionModal" tabindex="-1" role="dialog" aria-labelledby="transactionModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="transactionModalLabel">Transaction Status</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p id="modalMessage"></p> <!-- The message will be set dynamically -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    @* approve/deny buttons javascript *@
        <script>
            document.querySelectorAll('.approve-deny-buttons').forEach(buttonGroup => {
                const approveButton = buttonGroup.querySelector('.btn-approve');
                const denyButton = buttonGroup.querySelector('.btn-deny');
                const transactionRow = buttonGroup.closest('.transaction-row'); // The parent row
                const modalMessage = document.getElementById('modalMessage'); // Modal message element

                // Function to show the modal with the appropriate message
                function showModal(message) {
                    modalMessage.textContent = message; // Set the message in the modal
                    $('#transactionModal').modal('show'); // Use Bootstrap's modal to show it
                }

                // When Approve is clicked
                approveButton.addEventListener('click', () => {
                    buttonGroup.style.visibility = 'hidden'; // Hide buttons after approval
                    transactionRow.classList.remove('show-buttons'); // Remove shift
                    showModal('You have approved the transaction.'); // Show success message in modal
                });

                // When Deny is clicked
                denyButton.addEventListener('click', () => {
                    buttonGroup.style.visibility = 'hidden'; // Hide buttons after denial
                    transactionRow.classList.remove('show-buttons'); // Remove shift
                    showModal('You have denied the transaction.'); // Show failure message in modal
                });
            });
        </script>
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.1/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

</body>
</html>
